@page "/members"
@inject IDialogService DialogService
@inject IUserManager UserManager

@if (message == "Updated")
{
   <MudAlert Severity="Severity.Success">@message</MudAlert>
}

@if (editUser)
{
   <EditForm Model="userToUpdate" OnSubmit="UpdateUser">
       <table class="table">
           <thead class="thead-dark">
               <tr>
                   <th scope="col">Full Name</th>
                   <th scope="col">Email</th>
                   <th scope="col">Member Since</th>
                   <th scope="col">Active</th>
                   <th scope="col"></th>
               </tr>
           </thead>
           <tbody>
               <tr>
                   <td><input @bind="userToUpdate.FullName" /></td>
                   <td>@userToEdit.Email</td>
                   <td>@userToEdit.CreatedAt.ToString("d")</td>
                   <td><input type="checkbox" @bind="userToUpdate.IsActive" /></td>
                   <td><button type="submit" class="btn btn-primary">Save</button></td>
               </tr>
           </tbody>
       </table>
   </EditForm>
}

@if (Members != null || Members.Count != 0)
{
   <MudTable Context="member" Items="@Members">
       <ToolBarContent>
           <MudText Typo="Typo.h6">Members</MudText>
           <MudSpacer />
       </ToolBarContent>
       <HeaderContent>
           <MudTh>Full Name</MudTh>
           <MudTh>Email</MudTh>
           <MudTh>Member Since</MudTh>
           <MudTh>Authorized Admin</MudTh>
           <MudTh></MudTh>
       </HeaderContent>
       <RowTemplate>
           <MudTd DataLabel="Full Name">@member.FullName</MudTd>
           <MudTd DataLabel="Email">@member.Email</MudTd>
           <MudTd DataLabel="Member Since">@member.CreatedAt.ToString("d")</MudTd>
           @if (member.role.Equals(SD.Role.Admin))
           {
               <MudTd DataLabel="Authorized Admin">Yes</MudTd>
           }
           else
           {
               <MudTd DataLabel="Authorized Admin">No</MudTd>
           }
       <MudTd>
           <MudButton @onclick="() => EditUser(member)"><MudIcon Icon="@Icons.Material.Filled.Edit"></MudIcon></MudButton>
                <MudButton @onclick="() => DeleteUser(member.Id)"><MudIcon Icon="@Icons.Material.Filled.Delete"></MudIcon></MudButton>
       </MudTd>
       </RowTemplate>
   <PagerContent>
       <MudTablePager />
   </PagerContent>
   </MudTable>
}

@code {
   private List<User> Members = new List<User>();
    UserDTO userToUpdate = new UserDTO();
    User userToEdit = new User();
   int userId;
   bool editUser = false;
   string message;

   protected override async Task OnInitializedAsync()
   {
       Members = await UserManager.GetMembers();
   }

   private void EditUser(User user)
   {
       userToUpdate.FullName = user.FullName;
       userToUpdate.IsActive = user.IsActive;
       userToUpdate.role = SD.Role.Member;
       userToEdit = user;
       userId = user.Id;
       editUser = true;
   }

   private async Task UpdateUser()
   {
       editUser = false;
       await UserManager.UpdateUserinformation(userToUpdate, userId);
       Members = await UserManager.GetMembers();
       message = "Updated";
   }

   public async Task DeleteUser(int id)
   {
       var parameters = new DialogParameters();
       parameters.Add("ContentText", "Are you sure you want to delete the user? This action cannot be undone.");
       parameters.Add("ButtonText", "Delete");
       parameters.Add("Color", Color.Error);
       parameters.Add("Id", id);

       var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

       var dialog = DialogService.Show<DeleteUser>("Delete User", parameters, options);

       var result = await dialog.Result;
       if (!result.Canceled)
       {
           Members = await UserManager.GetMembers();
       }
   }
}