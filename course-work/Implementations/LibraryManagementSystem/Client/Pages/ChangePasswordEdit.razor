@page "/ChangePasswordEdit"
@inject IUserManager UserManager
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage;
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations

<MudGrid>

   <MudItem xs="12" sm="7">
       <MudPaper Class="pa-4">
         <MudText Typo="Typo.h6">Change Password</MudText>
           <MudForm @ref="form" @bind-Errors="@errors">
               <MudTextField T="string" Label="Current Password" HelperText="Your current password"
                             InputType="InputType.Password"
                             Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
                             RequiredError="This field is required" @bind-Value="password.OldPassword" />
               <MudTextField T="string" Label="New Password" HelperText="Use a strong password" @ref="pwField1"
                             InputType="InputType.Password"
                             Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
                             RequiredError="This field is required" @bind-Value="password.NewPassword" />
               <MudTextField T="string"
                             Label="Confirm Password" HelperText="Repeat the new password" InputType="InputType.Password" Required="true"
                             Validation="@(new Func<string, string>(PasswordMatch))" @bind-Value="password.NewPasswordConfirmed" />
               <div class="d-flex align-center justify-space-between mt-6">
                   <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" @onclick="() => EditPassword()">Save</MudButton>
               </div>
           </MudForm>
       </MudPaper>
   </MudItem>
</MudGrid>

@if(message == "Your password has been changed")
{
   <MudAlert Severity="Severity.Success">@message</MudAlert>
}
else if(message == "Something went wrong. Did you enter the correct password?")
{
   <MudAlert Severity="Severity.Error">@message</MudAlert>
}

@code {
    UpdateDTO password = new UpdateDTO();
    string[] errors = { };
   string message = "";
   MudTextField<string> pwField1;
   MudForm form;

   public async Task EditPassword()
   {
       var userEmail = await LocalStorage.GetItemAsync<string>("email");
       password.Email = userEmail;
       message = await UserManager.ChangePassword(password);
       if(message == "Try again")
       {
           message = "Something went wrong. Did you enter the correct password?";
       }
   }

   private IEnumerable<string> PasswordStrength(string pw)
   {
       if (string.IsNullOrWhiteSpace(pw))
       {
           yield return "Password is required!";
           yield break;
       }
       if (pw.Length < 6)
           yield return "Password must be at least 6 characters";
       if (!Regex.IsMatch(pw, @"[A-Z]"))
           yield return "Password must contain at least one uppercase letter";
       if (!Regex.IsMatch(pw, @"[a-z]"))
           yield return "Password must contain at least one lowercase letter";
       if (!Regex.IsMatch(pw, @"[0-9]"))
           yield return "Password must contain at least one number";
   }

   private string PasswordMatch(string arg)
   {
       if (pwField1.Value != arg)
           return "Passwords do not match";
       return null;
   }
}
