@page "/authors"
@using BaseLibrary.DTOs
@using BaseLibrary.Entities
@using ClientLibrary.Services.Interfaces
@using MudBlazor
@inject ClientLibrary.Services.Interfaces.IAuthorManager AuthorManager
@inject IDialogService DialogService

<MudPaper Class="p-4">
    <MudText Typo="Typo.h4">Authors</MudText>

    <MudTextField @bind-Value="SearchTerm" Label="Search Authors" Immediate="true" Class="mt-4 mb-4" />

    <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="OpenAddAuthorDialog">Add Author</MudButton>

    <MudTable Items="@FilteredAuthorList" Hover="true" Class="mt-4">
        <HeaderContent>
            <MudTh>Name</MudTh>
            <MudTh>Biography</MudTh>
            <MudTh>Date of Birth</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>@context.Name</MudTd>
            <MudTd>@context.Biography</MudTd>
            <MudTd>@context.DateOfBirth?.ToShortDateString()</MudTd>
            <MudTd>
                <MudButton Variant="Variant.Outlined" Color="Color.Info" OnClick="() => OpenEditAuthorDialog(context)">Edit</MudButton>
                <MudButton Variant="Variant.Outlined" Color="Color.Error" OnClick="() => DeleteAuthor(context.Id)">Delete</MudButton>
            </MudTd>
        </RowTemplate>
    </MudTable>
</MudPaper>

@code {
    List<Author> AuthorList = new();
    private string SearchTerm { get; set; } = string.Empty;

    private List<Author> FilteredAuthorList =>
        string.IsNullOrWhiteSpace(SearchTerm)
            ? AuthorList
            : AuthorList.Where(a => a.Name.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase)).ToList();

    protected override async Task OnInitializedAsync()
    {
        AuthorList = await AuthorManager.GetAllAuthorsAsync();
    }

    async Task RefreshAuthors()
    {
        AuthorList = await AuthorManager.GetAllAuthorsAsync();
        // SearchTerm = string.Empty; // Optional: Reset search term on refresh
        // StateHasChanged(); // Ensure UI updates if SearchTerm is reset or if filtering logic needs explicit trigger
    }

    async Task DeleteAuthor(int id)
    {
        await AuthorManager.DeleteAuthorAsync(id);
        await RefreshAuthors();
    }

    void OpenAddAuthorDialog() =>
        OpenAuthorDialog(new Author(), "Add Author", isEdit: false);

    void OpenEditAuthorDialog(Author author)
    {
        var dto = new Author
            {
                Name = author.Name,
                Biography = author.Biography,
                DateOfBirth = author.DateOfBirth ?? DateTime.Today,
                ImageUrl = author.ImageUrl,
                IsAlive = author.IsAlive,
                DateOfDeath = author.DateOfDeath
            };
        OpenAuthorDialog(dto, "Edit Author", isEdit: true, id: author.Id);
    }

    async Task OpenAuthorDialog(Author author, string title, bool isEdit, int? id = null)
    {
        var parameters = new DialogParameters
        {
            { "Author", author },
            { "IsEdit", isEdit },
            { "AuthorId", id }
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialog = DialogService.Show<AuthorFormDialog>(title, parameters, options);

        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await RefreshAuthors();
        }

    }
}