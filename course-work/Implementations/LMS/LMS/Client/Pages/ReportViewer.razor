@page "/ReportViewer"
@inject IJSRuntime js
<h2 class="mt-3">Print Reports</h2>

<MudButton Variant="Variant.Text" Color="Color.Secondary" @onclick="ShowTopProducts">Popular Products</MudButton>

<AuthorizeView Roles="Admin, Librarian">
	<MudButton Variant="Variant.Text" Color="Color.Primary" @onclick="ShowActiveLoans">Active Loans</MudButton>

	<MudButton Variant="Variant.Text" @onclick="ShowUserWithMostLoans">Borrower with the most loans</MudButton>
</AuthorizeView>

<div class="row">
	<div class="col-2">
		<MudButton class="btn btn-primary mb-2" @onclick="Print">Print</MudButton>
	</div>
</div>

<div class="row">
	<div class="col-12">
		<div id="PrintDiv" style="border: 1px solid black; min-height:400px;padding:5px;">
			@if (html != null)
			{
				@html

			}

		</div>
	</div>
</div>

@code {
	public RenderFragment html;
	public void ShowActiveLoans()
	{
		RenderFragment CreateDynamicComponent() => builder =>
		{
			builder.OpenComponent(0, typeof(ActiveLoans));
			builder.CloseComponent();

		};

		html = CreateDynamicComponent();

	}

	public void ShowTopProducts()
	{
		RenderFragment CreateDynamicComponent() => builder =>
		{
			builder.OpenComponent(0, typeof(TopProducts));
			builder.CloseComponent();

		};

		html = CreateDynamicComponent();

	}

	public void ShowUserWithMostLoans()
	{
		RenderFragment CreateDynamicComponent() => builder =>
		{
			builder.OpenComponent(0, typeof(MostUserLoans));
			builder.CloseComponent();

		};

		html = CreateDynamicComponent();

	}

	public async Task Print()
	{
		await js.InvokeVoidAsync("Print");
	}
}
