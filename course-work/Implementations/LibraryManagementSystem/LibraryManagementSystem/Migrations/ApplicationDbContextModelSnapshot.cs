// <auto-generated />
using System;
using LibraryManagementSystem.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LibraryManagementSystem.API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LibraryManagementSystem.API.Entities.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Biography")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Biography = "British author",
                            CreatedAt = new DateTime(2025, 5, 13, 18, 30, 37, 485, DateTimeKind.Utc).AddTicks(6745),
                            DateOfBirth = new DateTime(1965, 7, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "J.K. Rowling",
                            UpdatedAt = new DateTime(2025, 5, 13, 18, 30, 37, 485, DateTimeKind.Utc).AddTicks(6745)
                        },
                        new
                        {
                            Id = 2,
                            Biography = "Science fiction author",
                            CreatedAt = new DateTime(2025, 5, 13, 18, 30, 37, 485, DateTimeKind.Utc).AddTicks(6749),
                            DateOfBirth = new DateTime(1920, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Isaac Asimov",
                            UpdatedAt = new DateTime(2025, 5, 13, 18, 30, 37, 485, DateTimeKind.Utc).AddTicks(6749)
                        });
                });

            modelBuilder.Entity("LibraryManagementSystem.API.Entities.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("AvailableCopies")
                        .HasColumnType("int");

                    b.Property<string>("BookCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("CoverImageUrl")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<long>("ISBN")
                        .HasColumnType("bigint");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PageCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("PublishedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("TotalCopies")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("GenreId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            AvailableCopies = 5,
                            BookCode = "1001",
                            CoverImageUrl = "https://example.com/harrypotter.jpg",
                            CreatedAt = new DateTime(2025, 5, 13, 18, 30, 37, 485, DateTimeKind.Utc).AddTicks(6771),
                            Description = "A young wizard's journey begins.",
                            GenreId = 1,
                            ISBN = 9780747532699L,
                            Language = "English",
                            PageCount = 223,
                            PublishedDate = new DateTime(1997, 6, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Harry Potter and the Philosopher's Stone",
                            TotalCopies = 5,
                            UpdatedAt = new DateTime(2025, 5, 13, 18, 30, 37, 485, DateTimeKind.Utc).AddTicks(6772)
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 2,
                            AvailableCopies = 3,
                            BookCode = "1002",
                            CoverImageUrl = "https://example.com/foundation.jpg",
                            CreatedAt = new DateTime(2025, 5, 13, 18, 30, 37, 485, DateTimeKind.Utc).AddTicks(6776),
                            Description = "The story of the Galactic Empire's fall and rebirth.",
                            GenreId = 2,
                            ISBN = 9780553293357L,
                            Language = "English",
                            PageCount = 255,
                            PublishedDate = new DateTime(1951, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Foundation",
                            TotalCopies = 3,
                            UpdatedAt = new DateTime(2025, 5, 13, 18, 30, 37, 485, DateTimeKind.Utc).AddTicks(6776)
                        });
                });

            modelBuilder.Entity("LibraryManagementSystem.API.Entities.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 5, 13, 18, 30, 37, 485, DateTimeKind.Utc).AddTicks(6449),
                            Description = "Fantasy books",
                            Name = "Fantasy",
                            UpdatedAt = new DateTime(2025, 5, 13, 18, 30, 37, 485, DateTimeKind.Utc).AddTicks(6453)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 5, 13, 18, 30, 37, 485, DateTimeKind.Utc).AddTicks(6457),
                            Description = "Sci-fi books",
                            Name = "Science Fiction",
                            UpdatedAt = new DateTime(2025, 5, 13, 18, 30, 37, 485, DateTimeKind.Utc).AddTicks(6457)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 5, 13, 18, 30, 37, 485, DateTimeKind.Utc).AddTicks(6458),
                            Description = "Romantic novels",
                            Name = "Romance",
                            UpdatedAt = new DateTime(2025, 5, 13, 18, 30, 37, 485, DateTimeKind.Utc).AddTicks(6458)
                        });
                });

            modelBuilder.Entity("LibraryManagementSystem.API.Entities.Penalty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Penalties");
                });

            modelBuilder.Entity("LibraryManagementSystem.API.Entities.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Reservations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 1,
                            CreatedAt = new DateTime(2025, 5, 13, 18, 30, 37, 485, DateTimeKind.Utc).AddTicks(6846),
                            DueDate = new DateTime(2025, 5, 27, 18, 30, 37, 485, DateTimeKind.Utc).AddTicks(6840),
                            Status = "Reserved",
                            UpdatedAt = new DateTime(2025, 5, 13, 18, 30, 37, 485, DateTimeKind.Utc).AddTicks(6847),
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            BookId = 2,
                            CreatedAt = new DateTime(2025, 5, 13, 18, 30, 37, 485, DateTimeKind.Utc).AddTicks(6850),
                            DueDate = new DateTime(2025, 5, 27, 18, 30, 37, 485, DateTimeKind.Utc).AddTicks(6849),
                            Status = "Reserved",
                            UpdatedAt = new DateTime(2025, 5, 13, 18, 30, 37, 485, DateTimeKind.Utc).AddTicks(6851),
                            UserId = 2
                        });
                });

            modelBuilder.Entity("LibraryManagementSystem.API.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("LibraryManagementSystem.API.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("varchar(12)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 Main St",
                            CreatedAt = new DateTime(2025, 5, 13, 18, 30, 37, 485, DateTimeKind.Utc).AddTicks(6808),
                            Email = "alice@example.com",
                            FullName = "Alice Johnson",
                            PasswordHash = "hashedpassword",
                            PhoneNumber = "1234567890",
                            Role = "User",
                            UpdatedAt = new DateTime(2025, 5, 13, 18, 30, 37, 485, DateTimeKind.Utc).AddTicks(6805),
                            Username = "alice"
                        },
                        new
                        {
                            Id = 2,
                            Address = "456 Maple Ave",
                            CreatedAt = new DateTime(2025, 5, 13, 18, 30, 37, 485, DateTimeKind.Utc).AddTicks(6811),
                            Email = "bob@example.com",
                            FullName = "Bob Smith",
                            PasswordHash = "hashedpassword",
                            PhoneNumber = "0987654321",
                            Role = "User",
                            UpdatedAt = new DateTime(2025, 5, 13, 18, 30, 37, 485, DateTimeKind.Utc).AddTicks(6810),
                            Username = "bob"
                        });
                });

            modelBuilder.Entity("LibraryManagementSystem.API.Entities.Book", b =>
                {
                    b.HasOne("LibraryManagementSystem.API.Entities.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryManagementSystem.API.Entities.Genre", "Genre")
                        .WithMany("Books")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("LibraryManagementSystem.API.Entities.Penalty", b =>
                {
                    b.HasOne("LibraryManagementSystem.API.Entities.Book", "Book")
                        .WithMany("Penalties")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryManagementSystem.API.Entities.User", "User")
                        .WithMany("Penalties")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LibraryManagementSystem.API.Entities.Reservation", b =>
                {
                    b.HasOne("LibraryManagementSystem.API.Entities.Book", "Book")
                        .WithMany("Reservations")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryManagementSystem.API.Entities.User", "User")
                        .WithMany("Reservations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LibraryManagementSystem.API.Entities.Review", b =>
                {
                    b.HasOne("LibraryManagementSystem.API.Entities.Book", "Book")
                        .WithMany("Reviews")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryManagementSystem.API.Entities.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LibraryManagementSystem.API.Entities.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("LibraryManagementSystem.API.Entities.Book", b =>
                {
                    b.Navigation("Penalties");

                    b.Navigation("Reservations");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("LibraryManagementSystem.API.Entities.Genre", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("LibraryManagementSystem.API.Entities.User", b =>
                {
                    b.Navigation("Penalties");

                    b.Navigation("Reservations");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
