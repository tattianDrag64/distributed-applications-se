@page "/AccountSettings"
@inject IUserManager UserManager
@inject ILocalStorageService LocalStorage;
@inject NavigationManager NavigationManager

@if (!editUser)
{
    <div class="container mt-4 mb-4 p-3 d-flex justify-content-center">
        <div class="card p-4">
            <div class=" image d-flex flex-column justify-content-center align-items-center">
                <button class="btn btn-secondary"> <img src="https://i.imgur.com/wvxPV9S.png" height="100" width="100" /></button>
                <span class="name mt-3">@user.FullName</span> <span class="idd">@user.Email </span>
                <div class="d-flex flex-row justify-content-center align-items-center gap-2"> <span><i class="fa fa-copy"></i></span> </div>
                <div class="d-flex flex-row justify-content-center align-items-center mt-3"> </div> <div class=" d-flex mt-2">
                    <button class="btn1 btn-dark" @onclick="EditUser">Ändra uppgifter</button>
                </div> <div class="text mt-3">
                </div>
                <button class="btn1 btn-dark" @onclick="NavigateToCounterComponent"> Ändra lösenord </button>
                <div class="gap-3 mt-3 icons d-flex flex-row justify-content-center align-items-center">
                    <span><i class="fa fa-twitter"></i></span> <span><i class="fa fa-facebook-f"></i></span>
                    <span><i class="fa fa-instagram"></i></span> <span><i class="fa fa-linkedin"></i></span>
                </div>
                <div class=" px-2 rounded mt-4 date "> <span class="join">Joined @user.CreatedAt</span> </div>
            </div>
        </div>
    </div>







}
else
{
    <EditForm Model="updatedUser" OnSubmit="SubmitUser">
        <div class="mb-3">
            <label for="firstname">Full Name</label>
            <InputText id="firstname" @bind-Value="updatedUser.FullName" class="form-control" />
        </div>

        <button type="submit" class="btn btn-primary">Save</button>
    </EditForm>
}

@code {

    public int Id { get; set; }
    public string Email { get; set; }
    User user = new User();
    UserDTO updatedUser = new UserDTO();
    bool editUser = false;

    protected override async Task OnInitializedAsync()
    {
        var userEmail = await LocalStorage.GetItemAsync<string>("email");

        user = await UserManager.GetUserByEmail(userEmail);
    }

    private async Task SubmitUser()
    {
        editUser = false;
        updatedUser.IsActive = user.IsActive;
        await UserManager.UpdateUserinformation(updatedUser, user.Id);

    }

    private void NavigateToCounterComponent() { NavigationManager.NavigateTo("ChangePasswordEdit"); }

    private void EditUser()
    {
        editUser = true;
    }
}


